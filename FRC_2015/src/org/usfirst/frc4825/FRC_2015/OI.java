// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc4825.FRC_2015;

import org.usfirst.frc4825.FRC_2015.commands.AutonomousCommand;
import org.usfirst.frc4825.FRC_2015.commands.DriveToSwitch;
import org.usfirst.frc4825.FRC_2015.commands.DriveWithTimer;
import org.usfirst.frc4825.FRC_2015.commands.GoToNearTote;
import org.usfirst.frc4825.FRC_2015.commands.LowerBin;
import org.usfirst.frc4825.FRC_2015.commands.LowerTote;
import org.usfirst.frc4825.FRC_2015.commands.RaiseBin;
import org.usfirst.frc4825.FRC_2015.commands.RaiseTote;
import org.usfirst.frc4825.FRC_2015.commands.ToggleBinStopSpeed;
import org.usfirst.frc4825.FRC_2015.commands.ToggleReverseDrive;
import org.usfirst.frc4825.FRC_2015.commands.ToggleToteStopSpeed;
import org.usfirst.frc4825.FRC_2015.commands.Turn;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	// // CREATING BUTTONS
	// One type of button is a joystick button which is any button on a
	// joystick.
	// You create one by telling it which joystick it's on and which button
	// number it is.
	// Joystick stick = new Joystick(port);
	// Button button = new JoystickButton(stick, buttonNumber);

	// There are a few additional built in buttons you can use. Additionally,
	// by subclassing Button you can create custom triggers and bind those to
	// commands the same as any other Button.

	// // TRIGGERING COMMANDS WITH BUTTONS
	// Once you have a button, it's trivial to bind it to a button in one of
	// three ways:

	// Start the command when the button is pressed and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenPressed(new ExampleCommand());

	// Run the command while the button is being held down and interrupt it once
	// the button is released.
	// button.whileHeld(new ExampleCommand());

	// Start the command when the button is released and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenReleased(new ExampleCommand());

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public JoystickButton button1;
	public JoystickButton button2;
	public JoystickButton button3;
	public JoystickButton button4;
	public Joystick joystick;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public JoystickButton button5;
	public JoystickButton button6;
	public JoystickButton button7;
	public JoystickButton button8;

	public OI() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

		joystick = new Joystick(0);

		button4 = new JoystickButton(joystick, 4);
		button4.whileHeld(new RaiseBin());
		button3 = new JoystickButton(joystick, 3);
		button3.whileHeld(new LowerBin());
		button2 = new JoystickButton(joystick, 2);
		button2.whileHeld(new RaiseTote());
		button1 = new JoystickButton(joystick, 1);
		button1.whileHeld(new LowerTote());

		button5 = new JoystickButton(joystick, 5);
		button5.whenPressed(new ToggleToteStopSpeed());
		button6 = new JoystickButton(joystick, 6);
		button6.whenPressed(new ToggleBinStopSpeed());
		button7 = new JoystickButton(joystick, 7);
		button7.whenPressed(new ToggleReverseDrive());

		button8 = new JoystickButton(joystick, 8);
		button8.whenPressed(new GoToNearTote());

		// SmartDashboard Buttons
		SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

		SmartDashboard.putData("LowerTote", new LowerTote());

		SmartDashboard.putData("RaiseTote", new RaiseTote());

		SmartDashboard.putData("LowerBin", new LowerBin());

		SmartDashboard.putData("RaiseBin", new RaiseBin());

		SmartDashboard.putData("DriveToSwitch", new DriveToSwitch());

		SmartDashboard.putData("Turn", new Turn());

		SmartDashboard.putData("DriveWithTimer", new DriveWithTimer(2.0));

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

		SmartDashboard.putNumber("Autonomus for Bin0; Tote1", 0);

		SmartDashboard.putNumber("Autonomus Speed", 0.3);

		SmartDashboard.putBoolean("Front Switch", Robot.driveTrain.getSwitch());

		SmartDashboard.putBoolean("Tote Lower Switch",
				Robot.toteLift.getBottomSwitch());
		SmartDashboard.putBoolean("Tote Upper Switch",
				Robot.toteLift.getUpperSwitch());

		SmartDashboard.putBoolean("Bin Lower Switch",
				Robot.binLift.getBottomSwitch());
		SmartDashboard.putBoolean("Bin Upper Switch",
				Robot.binLift.getUpperSwitch());
	}

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
	public Joystick getJoystick() {
		return joystick;
	}

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
