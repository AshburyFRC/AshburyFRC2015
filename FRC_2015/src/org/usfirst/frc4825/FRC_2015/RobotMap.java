// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4825.FRC_2015;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainLeftDriveController;
    public static SpeedController driveTrainRightDriveController;
    public static RobotDrive driveTrainRobotDrive;
    public static DigitalInput driveTrainDriveLimitSwitch;
    public static Encoder driveTrainEncoder;
    public static Gyro driveTrainGyro;
    public static Solenoid rakeSolenoid;
    public static SpeedController liftLiftMotorController;
    public static DigitalInput liftUpperLimitSwitch;
    public static DigitalInput liftBottomLimitSwitch;
    public static DigitalInput liftFirstLvlLimitSwitch;
    public static DigitalInput liftSecondLvlLimitSwitch;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftDriveController = new Talon(1);
        LiveWindow.addActuator("Drive Train", "Left Drive Controller", (Talon) driveTrainLeftDriveController);
        
        driveTrainRightDriveController = new Talon(0);
        LiveWindow.addActuator("Drive Train", "Right Drive Controller", (Talon) driveTrainRightDriveController);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainLeftDriveController, driveTrainRightDriveController);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);
        

        driveTrainDriveLimitSwitch = new DigitalInput(2);
        LiveWindow.addSensor("Drive Train", "Drive Limit Switch", driveTrainDriveLimitSwitch);
        
        driveTrainEncoder = new Encoder(5, 6, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive Train", "Encoder", driveTrainEncoder);
        driveTrainEncoder.setDistancePerPulse(1.0);
        driveTrainEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveTrainGyro = new Gyro(0);
        LiveWindow.addSensor("Drive Train", "Gyro", driveTrainGyro);
        driveTrainGyro.setSensitivity(0.007);
        rakeSolenoid = new Solenoid(0, 0);
        LiveWindow.addActuator("Rake", "Solenoid", rakeSolenoid);
        
        liftLiftMotorController = new Talon(2);
        LiveWindow.addActuator("Lift", "Lift Motor Controller", (Talon) liftLiftMotorController);
        
        liftUpperLimitSwitch = new DigitalInput(0);
        LiveWindow.addSensor("Lift", "Upper Limit Switch", liftUpperLimitSwitch);
        
        liftBottomLimitSwitch = new DigitalInput(1);
        LiveWindow.addSensor("Lift", "Bottom Limit Switch", liftBottomLimitSwitch);
        
        liftFirstLvlLimitSwitch = new DigitalInput(3);
        LiveWindow.addSensor("Lift", "FirstLvl Limit Switch", liftFirstLvlLimitSwitch);
        
        liftSecondLvlLimitSwitch = new DigitalInput(4);
        LiveWindow.addSensor("Lift", "SecondLvl Limit Switch", liftSecondLvlLimitSwitch);
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
